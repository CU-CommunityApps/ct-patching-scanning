AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Create a set of EC2 instances to use for testing SSM documents

Mappings:

  MapOSParams:
    AMIParam:
      RHEL75: ami-6871a115
      AmazonLinux2: ami-013be31976ca2c322
      AmazonLinux: ami-0ff8a91507f77f867
      Ubuntu1604: ami-0f9351b59be17920e
      SUSE15: ami-0088d877847543557
      Windows2016Base: ami-05f5c28bb6992ab4b
      Windows2012R2Base: ami-0f7af6e605e2d2db5
      Windows2012Base: ami-09f6881bf152f63dc

Parameters:

  LoggingS3BucketParam:
    Default: example-logging-bucket
    Description: Where should SSM logs be saved?
    Type: String

  VPCParam:
    Default: vpc-71070114
    Description: VPC in which to launch instances
    Type: AWS::EC2::VPC::Id

  SubnetParam:
    Default: subnet-dd8519f6
    Description: Subnet in which to launch instances
    Type: AWS::EC2::Subnet::Id

  LimitHoursParam:
    Default: 1
    Description: How many hours before limit-stop?
    Type: Number

  PatchBaselineActionParam:
    Default: Install
    Description: Scan or Install?
    Type: String
    AllowedValues:
      - Scan
      - Install

  InspectorAssessmentDurationParam:
    Default: 900
    Description: Number of seconds Inspector should run its assessments; 3600 minimum recommended
    Type: String

Resources:

  TestInspectorTargetGroup:
    Type: "AWS::Inspector::ResourceGroup"
    Properties:
      ResourceGroupTags:
        -
          Key: Inspector Group
          Value: test

  TestInspectorAssessmentTarget:
    Type: "AWS::Inspector::AssessmentTarget"
    Properties:
      AssessmentTargetName: Test Assessment Group Target
      ResourceGroupArn: !GetAtt TestInspectorTargetGroup.Arn

  TestInspectorAssessmentTemplate:
    Type: "AWS::Inspector::AssessmentTemplate"
    DependsOn:
      - EC2AmazonLinux
      - EC2AmazonLinux2
      - EC2RHEL75
      - EC2Ubuntu1604
      - Windows2012Base
      - Windows2012R2Base
      - Windows2016Base
    Properties:
      AssessmentTargetArn: !GetAtt TestInspectorAssessmentTarget.Arn
      DurationInSeconds: !Ref InspectorAssessmentDurationParam
      # AssessmentTemplateName:
      RulesPackageArns:
        # https://docs.aws.amazon.com/inspector/latest/userguide/inspector_rules-arns.html
        # Common Vulnerabilities and Exposures
        - arn:aws:inspector:us-east-1:316112463485:rulespackage/0-gEjTy7T7
        # Security Best Practices
        # - arn:aws:inspector:us-east-1:316112463485:rulespackage/0-R01qwB5Q
      # UserAttributesForFindings:
      #   -
      #     Key: Application
      #     Value: !Ref ApplicationTagParam
      #   -
      #     Key: Environment
      #     Value: !Ref EnvironmentParam

  TestInspectorSchedule:
    Type: "AWS::Events::Rule"
    DependsOn:
      - EC2AmazonLinux
      - EC2AmazonLinux2
      - EC2RHEL75
      - EC2Ubuntu1604
      - Windows2012Base
      - Windows2012R2Base
      - Windows2016Base
    Properties:
      Description:  Test Inspector on test targets"
      # EventPattern:
      #   source:
      #     - aws.ec2
      #   detail-type:
      #     - "EC2 Instance State-change Notification"
      #   detail:
      #     state: "running"
      # Name: test-inspector-schedule
      ScheduleExpression: rate(1 day)
      State: DISABLED
      Targets:
        -
          Arn: !GetAtt TestInspectorAssessmentTemplate.Arn
          # EcsParameters:
          #   EcsParameters
          Id: default-inspector-assessment
          # Input: String
          # InputPath: String
          # InputTransformer:
          #   InputTransformer
          # KinesisParameters:
          #   KinesisParameters
          RoleArn: !GetAtt TestInspectorAssessmentRole.Arn
          # RunCommandParameters:
          #   RunCommandParameters

  TestInspectorAssessmentRole:
    Type: AWS::IAM::Role
    Properties:
      # RoleName: inspector-assessment-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
                Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: run-inspector-assessments
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - inspector:StartAssessmentRun
                Resource: '*'

  TestInstancesPatchAssociation:
    Type: "AWS::SSM::Association"
    DependsOn:
      - EC2AmazonLinux
      - EC2AmazonLinux2
      - EC2RHEL75
      - EC2Ubuntu1604
      - Windows2012Base
      - Windows2012R2Base
      - Windows2016Base
    Properties:
      # AssociationName: String
      # DocumentVersion: String
      # InstanceId: String
      Name: !Ref PatchAndRemoveKernelsSSMDoc
      OutputLocation:
        S3Location:
          OutputS3BucketName: !Ref LoggingS3BucketParam
          OutputS3KeyPrefix: test/
      # Parameters:
      #   String:
      #     - String
      ScheduleExpression: rate(1 hour)
      Targets:
        -
          Key: tag:Maintenance Group
          Values:
            - test


  PatchAndRemoveKernelsSSMDoc:
    Type: "AWS::SSM::Document"
    Properties:
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: "Remove old Linux kernels so Inspector won't trip on them"
        parameters: {}
        mainSteps:
        - action: aws:runDocument
          name: InspectorAgent
          inputs:
            documentType: SSMDocument
            documentPath: AmazonInspector-ManageAWSAgent
            documentParameters:
              Operation: Install
        - action: aws:runDocument
          name: PatchBaseline
          inputs:
            documentType: SSMDocument
            documentPath: AWS-RunPatchBaseline
            documentParameters:
              Operation: !Ref PatchBaselineActionParam
        - action: aws:runShellScript
          name: removeOldKernels
          precondition:
            StringEquals:
              - platformType
              - Linux
          inputs:
            workingDirectory: /tmp
            timeoutSeconds: 300
            runCommand:
              - "#!/bin/bash"
              - if [ -n "$(command -v yum)" ] ; then
              -   echo Using yum
              -   if [ -z "$(command -v package-cleanup)" ] ; then
              -     echo Installing package-cleanup
              -     yum install -y yum-utils
              -   fi
              -   uname -r
              -   echo Kernels before cleanup
              -   rpm -qa kernel
              -   package-cleanup --oldkernels --count 1 -y
              -   echo Kernels after cleanup
              -   rpm -qa kernel
              - elif [ -n "$(command -v apt-get)" ] ; then
              -   echo Using apt-get
              -   echo Kernels before cleanup
              -   dpkg --list | grep linux-image
              -   apt autoremove --purge
              -   echo Kernels after cleanup
              -   dpkg --list | grep linux-image
              - else
              -   echo Not using yum or apt-get
              -   echo Unsupported Linux distribution
              -   exit 1
              - fi


  TestInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      # MaxSessionDuration: Integer
      # Path: String
      # PermissionsBoundary: String
      # Policies:
      #   - Policies
      # RoleName: String

  TestInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      # Path: String
      Roles:
        - !Ref TestInstanceRole
      # InstanceProfileName: String

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group for patching test instances
      SecurityGroupIngress:
      - IpProtocol: tcp
        Description: all 10-space
        FromPort: 22
        ToPort: 22
        CidrIp: 10.0.0.0/8
      - IpProtocol: tcp
        Description: all 10-space
        FromPort: 3389
        ToPort: 3389
        CidrIp: 10.0.0.0/8
      Tags:
        -
          Key: Name
          Value: patching-test-sg
        -
          Key: Application
          Value: sandbox
        -
          Key: Environment
          Value: dev
      VpcId: !Ref VPCParam

  TestLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: patching-test-instance-template
      LaunchTemplateData:
        # SecurityGroups:
        #   - String
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Application
                Value: sandbox
              - Key: Environment
                Value: dev
              - Key: Maintenance Group
                Value: test
              - Key: Inspector Group
                Value: test
              - Key: lifecycle-policy
                Value: !Sub "limit-stop:${LimitHoursParam}"
          - ResourceType: volume
            Tags:
              - Key: Application
                Value: sandbox
              - Key: Environment
                Value: dev
        # UserData: String
        # InstanceInitiatedShutdownBehavior: String
        # BlockDeviceMappings:
        #   - BlockDeviceMapping
        IamInstanceProfile:
          Arn: !GetAtt TestInstanceProfile.Arn
          # Name: String
        # KernelId: String
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        # EbsOptimized: Boolean
        KeyName: pea1
        # DisableApiTermination: Boolean
        # ElasticGpuSpecifications:
        #   - ElasticGpuSpecification
        # Placement: Placement
        # InstanceMarketOptions: InstanceMarketOptions
        # NetworkInterfaces:
        #   - NetworkInterface
        # ImageId: String
        InstanceType: t2.micro
        # RamDiskId: String
        # Monitoring: Monitoring
        # CreditSpecification: CreditSpecification

  EC2RHEL75:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ MapOSParams, AMIParam, "RHEL75" ]
      LaunchTemplate:
        LaunchTemplateId: !Ref TestLaunchTemplate
        # LaunchTemplateName: String
        Version: !GetAtt TestLaunchTemplate.LatestVersionNumber
      SubnetId: !Ref SubnetParam
      Tags:
        - Key: Name
          Value: patching-test-RHEL75
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent

  EC2AmazonLinux:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ MapOSParams, AMIParam, "AmazonLinux" ]
      LaunchTemplate:
        LaunchTemplateId: !Ref TestLaunchTemplate
        # LaunchTemplateName: String
        Version: !GetAtt TestLaunchTemplate.LatestVersionNumber
      SubnetId: !Ref SubnetParam
      Tags:
        - Key: Name
          Value: patching-test-AmazonLinux

  EC2AmazonLinux2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ MapOSParams, AMIParam, "AmazonLinux2" ]
      LaunchTemplate:
        LaunchTemplateId: !Ref TestLaunchTemplate
        # LaunchTemplateName: String
        Version: !GetAtt TestLaunchTemplate.LatestVersionNumber
      SubnetId: !Ref SubnetParam
      Tags:
        - Key: Name
          Value: patching-test-AmazonLinux2

  EC2Ubuntu1604:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ MapOSParams, AMIParam, "Ubuntu1604" ]
      LaunchTemplate:
        LaunchTemplateId: !Ref TestLaunchTemplate
        # LaunchTemplateName: String
        Version: !GetAtt TestLaunchTemplate.LatestVersionNumber
      SubnetId: !Ref SubnetParam
      Tags:
        - Key: Name
          Value: patching-test-Ubuntu1604

  # EC2SUSE15:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     ImageId: !FindInMap [ MapOSParams, AMIParam, "SUSE15" ]
  #     LaunchTemplate:
  #       LaunchTemplateId: !Ref TestLaunchTemplate
  #       # LaunchTemplateName: String
  #       Version: !GetAtt TestLaunchTemplate.LatestVersionNumber
  #     SubnetId: !Ref SubnetParam
  #     Tags:
  #       - Key: Name
  #         Value: patching-test-SUSE15
  #     UserData:
  #       Fn::Base64: !Sub |
  #         #!/bin/bash -xe
  #         cd /tmp
  #         wget https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
  #         rpm --install amazon-ssm-agent.rpm
  #         systemctl enable amazon-ssm-agent
  #         systemctl start amazon-ssm-agent
  #         systemctl status amazon-ssm-agent > /tmp/ssm-agent-status.log

  Windows2016Base:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ MapOSParams, AMIParam, "Windows2016Base" ]
      LaunchTemplate:
        LaunchTemplateId: !Ref TestLaunchTemplate
        # LaunchTemplateName: String
        Version: !GetAtt TestLaunchTemplate.LatestVersionNumber
      SubnetId: !Ref SubnetParam
      Tags:
        - Key: Name
          Value: patching-test-Windows2016Base

  Windows2012R2Base:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ MapOSParams, AMIParam, "Windows2012R2Base" ]
      LaunchTemplate:
        LaunchTemplateId: !Ref TestLaunchTemplate
        # LaunchTemplateName: String
        Version: !GetAtt TestLaunchTemplate.LatestVersionNumber
      SubnetId: !Ref SubnetParam
      Tags:
        - Key: Name
          Value: patching-test-Windows2012R2Base

  Windows2012Base:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ MapOSParams, AMIParam, "Windows2012Base" ]
      LaunchTemplate:
        LaunchTemplateId: !Ref TestLaunchTemplate
        # LaunchTemplateName: String
        Version: !GetAtt TestLaunchTemplate.LatestVersionNumber
      SubnetId: !Ref SubnetParam
      Tags:
        - Key: Name
          Value: patching-test-Windows2012Base
